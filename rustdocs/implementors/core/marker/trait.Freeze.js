(function() {var implementors = {};
implementors["linfa"] = [{"text":"impl&lt;F&gt; Freeze for PearsonCorrelation&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R, L&gt; Freeze for MultiTargetModel&lt;R, L&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Pr","synthetic":true,"types":[]},{"text":"impl&lt;R, T&gt; Freeze for DatasetBase&lt;R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;L, P&gt; Freeze for CountedTargets&lt;L, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for ConfusionMatrix&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ReceiverOperatingCharacteristic","synthetic":true,"types":[]}];
implementors["linfa_bayes"] = [{"text":"impl Freeze for BayesError","synthetic":true,"types":[]},{"text":"impl Freeze for GaussianNbParams","synthetic":true,"types":[]}];
implementors["linfa_clustering"] = [{"text":"impl Freeze for AppxDbscan","synthetic":true,"types":[]},{"text":"impl Freeze for AppxDbscanLabeler","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for AppxDbscanHyperParams&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for AppxDbscanHyperParamsBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Dbscan","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for DbscanHyperParams&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for DbscanHyperParamsBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for GaussianMixtureModel&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for GmmError","synthetic":true,"types":[]},{"text":"impl Freeze for GmmCovarType","synthetic":true,"types":[]},{"text":"impl Freeze for GmmInitMethod","synthetic":true,"types":[]},{"text":"impl&lt;F, R&gt; Freeze for GmmHyperParams&lt;F, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for KMeans&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for KMeansError","synthetic":true,"types":[]},{"text":"impl&lt;F, R&gt; Freeze for KMeansHyperParams&lt;F, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, R&gt; Freeze for KMeansHyperParamsBuilder&lt;F, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["linfa_elasticnet"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for ElasticNetParams&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for ElasticNet&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["linfa_hierarchical"] = [{"text":"impl&lt;T&gt; Freeze for HierarchicalCluster&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["linfa_ica"] = [{"text":"impl Freeze for FastIcaError","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for FastIca&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for FittedFastIca&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for GFunc","synthetic":true,"types":[]}];
implementors["linfa_kernel"] = [{"text":"impl&lt;K1, K2&gt; Freeze for KernelInner&lt;K1, K2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;K2: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for KernelType","synthetic":true,"types":[]},{"text":"impl&lt;K1, K2&gt; Freeze for KernelBase&lt;K1, K2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;K2: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;K1 as Inner&gt;::Elem: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for KernelMethod&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for KernelParams&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["linfa_linear"] = [{"text":"impl Freeze for LinearError","synthetic":true,"types":[]},{"text":"impl Freeze for Link","synthetic":true,"types":[]},{"text":"impl Freeze for TweedieRegressor","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for FittedTweedieRegressor&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for LinearRegression","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for FittedLinearRegression&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["linfa_logistic"] = [{"text":"impl&lt;F&gt; Freeze for LogisticRegression&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, C&gt; Freeze for FittedLogisticRegression&lt;F, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["linfa_pls"] = [{"text":"impl Freeze for PlsError","synthetic":true,"types":[]},{"text":"impl Freeze for PlsSvdParams","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for PlsSvd&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for PlsRegressionParams&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for PlsRegression&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for PlsCanonicalParams&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for PlsCanonical&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for PlsCcaParams&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for PlsCca&lt;F&gt;","synthetic":true,"types":[]}];
implementors["linfa_reduction"] = [{"text":"impl&lt;F&gt; Freeze for DiffusionMap&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for DiffusionMapParams","synthetic":true,"types":[]},{"text":"impl Freeze for PcaParams","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for Pca&lt;F&gt;","synthetic":true,"types":[]}];
implementors["linfa_svm"] = [{"text":"impl Freeze for SvmResult","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for SolverParams&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for SeparatingHyperplane&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, F, K&gt; Freeze for SolverState&lt;'a, F, K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, T&gt; Freeze for SvmParams&lt;F, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ExitReason","synthetic":true,"types":[]},{"text":"impl&lt;F, T&gt; Freeze for Svm&lt;F, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["linfa_trees"] = [{"text":"impl&lt;F, L&gt; Freeze for TreeNode&lt;F, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, L&gt; Freeze for DecisionTree&lt;F, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for SplitQuality","synthetic":true,"types":[]},{"text":"impl&lt;F, L&gt; Freeze for DecisionTreeParams&lt;F, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, F, L&gt; Freeze for NodeIter&lt;'a, F, L&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, F, L&gt; Freeze for Tikz&lt;'a, F, L&gt;","synthetic":true,"types":[]}];
implementors["linfa_tsne"] = [{"text":"impl Freeze for TSneError","synthetic":true,"types":[]},{"text":"impl&lt;F, R&gt; Freeze for TSne&lt;F, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()
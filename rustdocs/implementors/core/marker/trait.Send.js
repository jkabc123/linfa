(function() {var implementors = {};
implementors["linfa"] = [{"text":"impl&lt;F&gt; Send for PearsonCorrelation&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, L&gt; !Send for MultiTargetModel&lt;R, L&gt;","synthetic":true,"types":[]},{"text":"impl Send for Pr","synthetic":true,"types":[]},{"text":"impl&lt;R, T&gt; Send for DatasetBase&lt;R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;L, P&gt; Send for CountedTargets&lt;L, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for ConfusionMatrix&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ReceiverOperatingCharacteristic","synthetic":true,"types":[]}];
implementors["linfa_bayes"] = [{"text":"impl Send for BayesError","synthetic":true,"types":[]},{"text":"impl Send for GaussianNbParams","synthetic":true,"types":[]}];
implementors["linfa_clustering"] = [{"text":"impl Send for AppxDbscan","synthetic":true,"types":[]},{"text":"impl Send for AppxDbscanLabeler","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for AppxDbscanHyperParams&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for AppxDbscanHyperParamsBuilder&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl Send for Dbscan","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for DbscanHyperParams&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for DbscanHyperParamsBuilder&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for GaussianMixtureModel&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl Send for GmmError","synthetic":true,"types":[]},{"text":"impl Send for GmmCovarType","synthetic":true,"types":[]},{"text":"impl Send for GmmInitMethod","synthetic":true,"types":[]},{"text":"impl&lt;F, R&gt; Send for GmmHyperParams&lt;F, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for KMeans&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl Send for KMeansError","synthetic":true,"types":[]},{"text":"impl&lt;F, R&gt; Send for KMeansHyperParams&lt;F, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, R&gt; Send for KMeansHyperParamsBuilder&lt;F, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["linfa_elasticnet"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for ElasticNetParams&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for ElasticNet&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["linfa_hierarchical"] = [{"text":"impl&lt;T&gt; Send for HierarchicalCluster&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["linfa_ica"] = [{"text":"impl Send for FastIcaError","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for FastIca&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for FittedFastIca&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for GFunc","synthetic":true,"types":[]}];
implementors["linfa_kernel"] = [{"text":"impl&lt;K1, K2&gt; Send for KernelInner&lt;K1, K2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;K2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for KernelType","synthetic":true,"types":[]},{"text":"impl&lt;K1, K2&gt; Send for KernelBase&lt;K1, K2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;K2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for KernelMethod&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for KernelParams&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["linfa_linear"] = [{"text":"impl Send for LinearError","synthetic":true,"types":[]},{"text":"impl Send for Link","synthetic":true,"types":[]},{"text":"impl Send for TweedieRegressor","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for FittedTweedieRegressor&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for LinearRegression","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for FittedLinearRegression&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["linfa_logistic"] = [{"text":"impl&lt;F&gt; Send for LogisticRegression&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F, C&gt; Send for FittedLogisticRegression&lt;F, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["linfa_pls"] = [{"text":"impl Send for PlsError","synthetic":true,"types":[]},{"text":"impl Send for PlsSvdParams","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for PlsSvd&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for PlsRegressionParams&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for PlsRegression&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for PlsCanonicalParams&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for PlsCanonical&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for PlsCcaParams&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for PlsCca&lt;F&gt;","synthetic":true,"types":[]}];
implementors["linfa_reduction"] = [{"text":"impl&lt;F&gt; Send for DiffusionMap&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DiffusionMapParams","synthetic":true,"types":[]},{"text":"impl Send for PcaParams","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for Pca&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["linfa_svm"] = [{"text":"impl Send for SvmResult","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for SolverParams&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for SeparatingHyperplane&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, F, K&gt; Send for SolverState&lt;'a, F, K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, T&gt; Send for SvmParams&lt;F, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ExitReason","synthetic":true,"types":[]},{"text":"impl&lt;F, T&gt; Send for Svm&lt;F, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["linfa_trees"] = [{"text":"impl&lt;F, L&gt; Send for TreeNode&lt;F, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, L&gt; Send for DecisionTree&lt;F, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SplitQuality","synthetic":true,"types":[]},{"text":"impl&lt;F, L&gt; Send for DecisionTreeParams&lt;F, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, F, L&gt; Send for NodeIter&lt;'a, F, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, F, L&gt; Send for Tikz&lt;'a, F, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["linfa_tsne"] = [{"text":"impl Send for TSneError","synthetic":true,"types":[]},{"text":"impl&lt;F, R&gt; Send for TSne&lt;F, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()
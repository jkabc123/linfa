(function() {var implementors = {};
implementors["linfa"] = [{"text":"impl&lt;F&gt; Sync for PearsonCorrelation&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, L&gt; !Sync for MultiTargetModel&lt;R, L&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Pr","synthetic":true,"types":[]},{"text":"impl&lt;R, T&gt; Sync for DatasetBase&lt;R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;L, P&gt; Sync for CountedTargets&lt;L, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for ConfusionMatrix&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ReceiverOperatingCharacteristic","synthetic":true,"types":[]}];
implementors["linfa_bayes"] = [{"text":"impl Sync for BayesError","synthetic":true,"types":[]},{"text":"impl Sync for GaussianNbParams","synthetic":true,"types":[]}];
implementors["linfa_clustering"] = [{"text":"impl Sync for AppxDbscan","synthetic":true,"types":[]},{"text":"impl Sync for AppxDbscanLabeler","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for AppxDbscanHyperParams&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for AppxDbscanHyperParamsBuilder&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Dbscan","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for DbscanHyperParams&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for DbscanHyperParamsBuilder&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for GaussianMixtureModel&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl Sync for GmmError","synthetic":true,"types":[]},{"text":"impl Sync for GmmCovarType","synthetic":true,"types":[]},{"text":"impl Sync for GmmInitMethod","synthetic":true,"types":[]},{"text":"impl&lt;F, R&gt; Sync for GmmHyperParams&lt;F, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for KMeans&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl Sync for KMeansError","synthetic":true,"types":[]},{"text":"impl&lt;F, R&gt; Sync for KMeansHyperParams&lt;F, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, R&gt; Sync for KMeansHyperParamsBuilder&lt;F, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["linfa_elasticnet"] = [{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for ElasticNetParams&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for ElasticNet&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["linfa_hierarchical"] = [{"text":"impl&lt;T&gt; Sync for HierarchicalCluster&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["linfa_ica"] = [{"text":"impl Sync for FastIcaError","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for FastIca&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for FittedFastIca&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for GFunc","synthetic":true,"types":[]}];
implementors["linfa_kernel"] = [{"text":"impl&lt;K1, K2&gt; Sync for KernelInner&lt;K1, K2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K1: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;K2: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for KernelType","synthetic":true,"types":[]},{"text":"impl&lt;K1, K2&gt; Sync for KernelBase&lt;K1, K2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K1: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;K2: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for KernelMethod&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for KernelParams&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["linfa_linear"] = [{"text":"impl Sync for LinearError","synthetic":true,"types":[]},{"text":"impl Sync for Link","synthetic":true,"types":[]},{"text":"impl Sync for TweedieRegressor","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for FittedTweedieRegressor&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for LinearRegression","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for FittedLinearRegression&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["linfa_logistic"] = [{"text":"impl&lt;F&gt; Sync for LogisticRegression&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F, C&gt; Sync for FittedLogisticRegression&lt;F, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["linfa_pls"] = [{"text":"impl Sync for PlsError","synthetic":true,"types":[]},{"text":"impl Sync for PlsSvdParams","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for PlsSvd&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for PlsRegressionParams&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for PlsRegression&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for PlsCanonicalParams&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for PlsCanonical&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for PlsCcaParams&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for PlsCca&lt;F&gt;","synthetic":true,"types":[]}];
implementors["linfa_reduction"] = [{"text":"impl&lt;F&gt; Sync for DiffusionMap&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for DiffusionMapParams","synthetic":true,"types":[]},{"text":"impl Sync for PcaParams","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for Pca&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["linfa_svm"] = [{"text":"impl Sync for SvmResult","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for SolverParams&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for SeparatingHyperplane&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, F, K&gt; Sync for SolverState&lt;'a, F, K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, T&gt; Sync for SvmParams&lt;F, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ExitReason","synthetic":true,"types":[]},{"text":"impl&lt;F, T&gt; Sync for Svm&lt;F, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["linfa_trees"] = [{"text":"impl&lt;F, L&gt; Sync for TreeNode&lt;F, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, L&gt; Sync for DecisionTree&lt;F, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for SplitQuality","synthetic":true,"types":[]},{"text":"impl&lt;F, L&gt; Sync for DecisionTreeParams&lt;F, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, F, L&gt; Sync for NodeIter&lt;'a, F, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, F, L&gt; Sync for Tikz&lt;'a, F, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["linfa_tsne"] = [{"text":"impl Sync for TSneError","synthetic":true,"types":[]},{"text":"impl&lt;F, R&gt; Sync for TSne&lt;F, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()
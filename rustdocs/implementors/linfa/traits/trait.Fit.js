(function() {var implementors = {};
implementors["linfa_bayes"] = [{"text":"impl&lt;F, D, L&gt; Fit&lt;'_, ArrayBase&lt;D, Dim&lt;[usize; 2]&gt;&gt;, L&gt; for GaussianNbParams <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Data&lt;Elem = F&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: AsTargets&lt;Elem = usize&gt; + Labels&lt;Elem = usize&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["linfa_clustering"] = [{"text":"impl&lt;'a, F:&nbsp;Float + Lapack + Scalar, R:&nbsp;Rng + Clone, D:&nbsp;Data&lt;Elem = F&gt;, T&gt; Fit&lt;'a, ArrayBase&lt;D, Dim&lt;[usize; 2]&gt;&gt;, T&gt; for GmmHyperParams&lt;F, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, F:&nbsp;Float, R:&nbsp;Rng + Clone, D:&nbsp;Data&lt;Elem = F&gt;, T&gt; Fit&lt;'a, ArrayBase&lt;D, Dim&lt;[usize; 2]&gt;&gt;, T&gt; for KMeansHyperParams&lt;F, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, F:&nbsp;Float, R:&nbsp;Rng + Clone, D:&nbsp;Data&lt;Elem = F&gt;, T&gt; Fit&lt;'a, ArrayBase&lt;D, Dim&lt;[usize; 2]&gt;&gt;, T&gt; for KMeansHyperParamsBuilder&lt;F, R&gt;","synthetic":false,"types":[]}];
implementors["linfa_elasticnet"] = [{"text":"impl&lt;'a, F, D, T&gt; Fit&lt;'a, ArrayBase&lt;D, Dim&lt;[usize; 2]&gt;&gt;, T&gt; for ElasticNetParams&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Float + AbsDiffEq + Lapack,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Data&lt;Elem = F&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AsTargets&lt;Elem = F&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["linfa_ica"] = [{"text":"impl&lt;'a, F:&nbsp;Float + Lapack, D:&nbsp;Data&lt;Elem = F&gt;, T&gt; Fit&lt;'a, ArrayBase&lt;D, Dim&lt;[usize; 2]&gt;&gt;, T&gt; for FastIca&lt;F&gt;","synthetic":false,"types":[]}];
implementors["linfa_linear"] = [{"text":"impl&lt;A:&nbsp;Float, D:&nbsp;Data&lt;Elem = A&gt;, T:&nbsp;AsTargets&lt;Elem = A&gt;&gt; Fit&lt;'_, ArrayBase&lt;D, Dim&lt;[usize; 2]&gt;&gt;, T&gt; for TweedieRegressor","synthetic":false,"types":[]},{"text":"impl&lt;'a, F:&nbsp;Float, D:&nbsp;Data&lt;Elem = F&gt;, T:&nbsp;AsTargets&lt;Elem = F&gt;&gt; Fit&lt;'a, ArrayBase&lt;D, Dim&lt;[usize; 2]&gt;&gt;, T&gt; for LinearRegression","synthetic":false,"types":[]}];
implementors["linfa_logistic"] = [{"text":"impl&lt;'a, C:&nbsp;'a + PartialOrd + Clone, F:&nbsp;Float, D:&nbsp;Data&lt;Elem = F&gt;, T:&nbsp;AsTargets&lt;Elem = C&gt;&gt; Fit&lt;'a, ArrayBase&lt;D, Dim&lt;[usize; 2]&gt;&gt;, T&gt; for LogisticRegression&lt;F&gt;","synthetic":false,"types":[]}];
implementors["linfa_pls"] = [{"text":"impl&lt;F:&nbsp;Float + Scalar + Lapack, D:&nbsp;Data&lt;Elem = F&gt;&gt; Fit&lt;'_, ArrayBase&lt;D, Dim&lt;[usize; 2]&gt;&gt;, ArrayBase&lt;D, Dim&lt;[usize; 2]&gt;&gt;&gt; for PlsSvdParams","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Float + Scalar + Lapack, D:&nbsp;Data&lt;Elem = F&gt;&gt; Fit&lt;'_, ArrayBase&lt;D, Dim&lt;[usize; 2]&gt;&gt;, ArrayBase&lt;D, Dim&lt;[usize; 2]&gt;&gt;&gt; for PlsRegressionParams&lt;F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Float + Scalar + Lapack, D:&nbsp;Data&lt;Elem = F&gt;&gt; Fit&lt;'_, ArrayBase&lt;D, Dim&lt;[usize; 2]&gt;&gt;, ArrayBase&lt;D, Dim&lt;[usize; 2]&gt;&gt;&gt; for PlsCanonicalParams&lt;F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Float + Scalar + Lapack, D:&nbsp;Data&lt;Elem = F&gt;&gt; Fit&lt;'_, ArrayBase&lt;D, Dim&lt;[usize; 2]&gt;&gt;, ArrayBase&lt;D, Dim&lt;[usize; 2]&gt;&gt;&gt; for PlsCcaParams&lt;F&gt;","synthetic":false,"types":[]}];
implementors["linfa_reduction"] = [{"text":"impl&lt;'a, T, D:&nbsp;Data&lt;Elem = f64&gt;&gt; Fit&lt;'a, ArrayBase&lt;D, Dim&lt;[usize; 2]&gt;&gt;, T&gt; for PcaParams","synthetic":false,"types":[]}];
implementors["linfa_svm"] = [{"text":"impl&lt;'a, F:&nbsp;Float&gt; Fit&lt;'a, ArrayBase&lt;OwnedRepr&lt;F&gt;, Dim&lt;[usize; 2]&gt;&gt;, ArrayBase&lt;OwnedRepr&lt;bool&gt;, Dim&lt;[usize; 2]&gt;&gt;&gt; for SvmParams&lt;F, Pr&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, F:&nbsp;Float&gt; Fit&lt;'a, ArrayBase&lt;ViewRepr&lt;&amp;'a F&gt;, Dim&lt;[usize; 2]&gt;&gt;, ArrayBase&lt;ViewRepr&lt;&amp;'a bool&gt;, Dim&lt;[usize; 2]&gt;&gt;&gt; for SvmParams&lt;F, Pr&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, F:&nbsp;Float&gt; Fit&lt;'a, ArrayBase&lt;OwnedRepr&lt;F&gt;, Dim&lt;[usize; 2]&gt;&gt;, CountedTargets&lt;bool, ArrayBase&lt;OwnedRepr&lt;bool&gt;, Dim&lt;[usize; 2]&gt;&gt;&gt;&gt; for SvmParams&lt;F, Pr&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, F:&nbsp;Float&gt; Fit&lt;'a, ArrayBase&lt;ViewRepr&lt;&amp;'a F&gt;, Dim&lt;[usize; 2]&gt;&gt;, CountedTargets&lt;bool, ArrayBase&lt;ViewRepr&lt;&amp;'a bool&gt;, Dim&lt;[usize; 2]&gt;&gt;&gt;&gt; for SvmParams&lt;F, Pr&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, F:&nbsp;Float&gt; Fit&lt;'a, ArrayBase&lt;OwnedRepr&lt;F&gt;, Dim&lt;[usize; 2]&gt;&gt;, ArrayBase&lt;OwnedRepr&lt;()&gt;, Dim&lt;[usize; 2]&gt;&gt;&gt; for SvmParams&lt;F, Pr&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, F:&nbsp;Float&gt; Fit&lt;'a, ArrayBase&lt;ViewRepr&lt;&amp;'a F&gt;, Dim&lt;[usize; 2]&gt;&gt;, ArrayBase&lt;ViewRepr&lt;&amp;'a ()&gt;, Dim&lt;[usize; 2]&gt;&gt;&gt; for SvmParams&lt;F, Pr&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, F:&nbsp;Float&gt; Fit&lt;'a, ArrayBase&lt;OwnedRepr&lt;F&gt;, Dim&lt;[usize; 2]&gt;&gt;, CountedTargets&lt;(), ArrayBase&lt;OwnedRepr&lt;()&gt;, Dim&lt;[usize; 2]&gt;&gt;&gt;&gt; for SvmParams&lt;F, Pr&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, F:&nbsp;Float&gt; Fit&lt;'a, ArrayBase&lt;OwnedRepr&lt;F&gt;, Dim&lt;[usize; 2]&gt;&gt;, CountedTargets&lt;(), ArrayBase&lt;ViewRepr&lt;&amp;'a ()&gt;, Dim&lt;[usize; 2]&gt;&gt;&gt;&gt; for SvmParams&lt;F, Pr&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, F:&nbsp;Float&gt; Fit&lt;'a, ArrayBase&lt;OwnedRepr&lt;F&gt;, Dim&lt;[usize; 2]&gt;&gt;, ArrayBase&lt;OwnedRepr&lt;F&gt;, Dim&lt;[usize; 2]&gt;&gt;&gt; for SvmParams&lt;F, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, F:&nbsp;Float&gt; Fit&lt;'a, ArrayBase&lt;ViewRepr&lt;&amp;'a F&gt;, Dim&lt;[usize; 2]&gt;&gt;, ArrayBase&lt;ViewRepr&lt;&amp;'a F&gt;, Dim&lt;[usize; 2]&gt;&gt;&gt; for SvmParams&lt;F, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, F:&nbsp;Float&gt; Fit&lt;'a, ArrayBase&lt;OwnedRepr&lt;F&gt;, Dim&lt;[usize; 2]&gt;&gt;, ArrayBase&lt;OwnedRepr&lt;F&gt;, Dim&lt;[usize; 1]&gt;&gt;&gt; for SvmParams&lt;F, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, F:&nbsp;Float&gt; Fit&lt;'a, ArrayBase&lt;ViewRepr&lt;&amp;'a F&gt;, Dim&lt;[usize; 2]&gt;&gt;, ArrayBase&lt;ViewRepr&lt;&amp;'a F&gt;, Dim&lt;[usize; 1]&gt;&gt;&gt; for SvmParams&lt;F, F&gt;","synthetic":false,"types":[]}];
implementors["linfa_trees"] = [{"text":"impl&lt;'a, F:&nbsp;Float, L:&nbsp;Label + 'a + Debug, D, T&gt; Fit&lt;'a, ArrayBase&lt;D, Dim&lt;[usize; 2]&gt;&gt;, T&gt; for DecisionTreeParams&lt;F, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Data&lt;Elem = F&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AsTargets&lt;Elem = L&gt; + Labels&lt;Elem = L&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()